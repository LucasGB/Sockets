/** * TCPServer: Servidor para conexao TCP com Threads * Descricao: Recebe uma conexao, cria uma thread, recebe uma mensagem e finaliza a conexao */import java.net.*;import java.io.*;import java.util.Scanner;public class TCPServer {    public static void main (String args[]) {        try{            int serverPort = 7896; // porta do servidor            /* cria um socket e mapeia a porta para aguardar conexao */            ServerSocket listenSocket = new ServerSocket(serverPort);                        while(true) {                System.out.println ("Servidor aguardando conexao ...");				/* aguarda conexoes */                Socket clientSocket = listenSocket.accept();                                System.out.println ("Cliente conectado ... Criando thread ...");                /* cria um thread para atender a conexao */                Listener l = new Listener(clientSocket);                Transmitter t = new Transmitter(clientSocket);            } //while                    } catch(IOException e) {	    System.out.println("Listen socket:"+e.getMessage());	} //catch    } //main} //classclass Listener extends Thread {    DataInputStream in;    Socket clientSocket;    public Listener (Socket aClientSocket){        try {            clientSocket = aClientSocket;            in = new DataInputStream(clientSocket.getInputStream());            this.start();        } catch(IOException e){            System.out.println("Connection: " + e.getMessage());        }    }    public void run(){        try{            String data;            do{                if(clientSocket.isClosed()){                    break;                } else {                    data = in.readUTF();                    System.out.println("Received message: " + data);                    if(data.equals("SAIR")){                        break;                            }}            }while(true);            in.close(); clientSocket.close();  /* finaliza a conexao com o cliente */                                    } catch (EOFException e) {            System.out.println("EOF: "+e.getMessage());        } catch(IOException e) {            System.out.println("leituralkkk: "+e.getMessage());        }    }    }class Transmitter extends Thread {    DataOutputStream out;    Socket clientSocket;    Scanner sc = new Scanner(System.in);    String msg;    public Transmitter(Socket aClientSocket){        try{            clientSocket = aClientSocket;            out = new DataOutputStream(clientSocket.getOutputStream());            this.start();        } catch(IOException e){            System.out.println("Connection: " + e.getMessage());        }    }    public void run(){        try{            do{                System.out.print("Digite uma mensagem: ");                String msg = sc.nextLine();                 if(msg.equals("SAIR")){                    out.close(); clientSocket.close();                    break;                }                else out.writeUTF(msg);                out.flush();            }while(true);            System.out.println("IHDBaiybsdyiabi");                    } catch (UnknownHostException e){        System.out.println("Socket:"+e.getMessage());            } catch (EOFException e){        System.out.println("EOF:"+e.getMessage());            } catch (IOException e){        System.out.println("leitura:"+e.getMessage());            } //catch        }    }